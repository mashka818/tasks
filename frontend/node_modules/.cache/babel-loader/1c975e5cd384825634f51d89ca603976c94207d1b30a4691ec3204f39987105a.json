{"ast":null,"code":"import axios from 'axios';\nimport { getCurrentUser, saveUser, removeUser } from '../utils/tokenUtils';\nimport api from './api';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\nclass AuthService {\n  async login(username, password) {\n    console.log('Attempting login for user:', username);\n    try {\n      const response = await axios.post(`${API_URL}/auth/signin`, {\n        username,\n        password\n      });\n      console.log('Login response received:', response.status);\n      if (response.data.accessToken) {\n        console.log('Access token received, saving user data');\n        console.log('Token:', response.data.accessToken.substring(0, 20) + '...');\n        saveUser(response.data);\n      } else {\n        console.log('No access token in response');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error.message);\n      if (error.response) {\n        console.error('Server response data:', error.response.data);\n      }\n      throw error;\n    }\n  }\n  logout() {\n    console.log('Logging out user');\n    removeUser();\n  }\n  register(userData) {\n    return axios.post(`${API_URL}/auth/signup`, userData);\n  }\n  getCurrentUser() {\n    const user = getCurrentUser();\n    console.log('Getting current user:', user ? `${user.username} (ID: ${user.id})` : 'No user found');\n    if (user) {\n      console.log('User has token:', !!user.accessToken);\n    }\n    return user;\n  }\n  getAuthHeader() {\n    const user = this.getCurrentUser();\n    if (user && user.accessToken) {\n      // Ensure the token is properly formatted\n      return {\n        'x-access-token': user.accessToken\n      };\n    } else {\n      return {};\n    }\n  }\n\n  // Метод для проверки токена\n  async checkToken() {\n    try {\n      console.log('Checking token validity...');\n      const response = await api.get('/debug/check-token');\n      console.log('Token check response:', response.data);\n      return {\n        valid: true,\n        data: response.data\n      };\n    } catch (error) {\n      console.error('Token check failed:', error.message);\n\n      // If error is due to unauthorized or token expiration\n      if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n        console.log('Token is invalid or expired');\n        // Clear the invalid token\n        removeUser();\n      }\n      return {\n        valid: false,\n        error: error.message\n      };\n    }\n  }\n}\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["axios","getCurrentUser","saveUser","removeUser","api","API_URL","process","env","REACT_APP_API_URL","AuthService","login","username","password","console","log","response","post","status","data","accessToken","substring","error","message","logout","register","userData","user","id","getAuthHeader","checkToken","get","valid","authService"],"sources":["C:/Users/Masha/Desktop/KP/frontend/src/services/auth.service.js"],"sourcesContent":["import axios from 'axios';\nimport { getCurrentUser, saveUser, removeUser } from '../utils/tokenUtils';\nimport api from './api';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\nclass AuthService {\n  async login(username, password) {\n    console.log('Attempting login for user:', username);\n    try {\n      const response = await axios.post(`${API_URL}/auth/signin`, { username, password });\n      console.log('Login response received:', response.status);\n      \n      if (response.data.accessToken) {\n        console.log('Access token received, saving user data');\n        console.log('Token:', response.data.accessToken.substring(0, 20) + '...');\n        saveUser(response.data);\n      } else {\n        console.log('No access token in response');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error.message);\n      if (error.response) {\n        console.error('Server response data:', error.response.data);\n      }\n      throw error;\n    }\n  }\n\n  logout() {\n    console.log('Logging out user');\n    removeUser();\n  }\n\n  register(userData) {\n    return axios.post(`${API_URL}/auth/signup`, userData);\n  }\n\n  getCurrentUser() {\n    const user = getCurrentUser();\n    console.log('Getting current user:', user ? `${user.username} (ID: ${user.id})` : 'No user found');\n    if (user) {\n      console.log('User has token:', !!user.accessToken);\n    }\n    return user;\n  }\n\n  getAuthHeader() {\n    const user = this.getCurrentUser();\n    if (user && user.accessToken) {\n      // Ensure the token is properly formatted\n      return { 'x-access-token': user.accessToken };\n    } else {\n      return {};\n    }\n  }\n  \n  // Метод для проверки токена\n  async checkToken() {\n    try {\n      console.log('Checking token validity...');\n      const response = await api.get('/debug/check-token');\n      console.log('Token check response:', response.data);\n      return { valid: true, data: response.data };\n    } catch (error) {\n      console.error('Token check failed:', error.message);\n      \n      // If error is due to unauthorized or token expiration\n      if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n        console.log('Token is invalid or expired');\n        // Clear the invalid token\n        removeUser();\n      }\n      \n      return { valid: false, error: error.message };\n    }\n  }\n}\n\nconst authService = new AuthService();\nexport default authService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}