{"ast":null,"code":"import axios from 'axios';\nimport { getCurrentUser, saveUser, removeUser, setupTokenExpiryTimer } from '../utils/tokenUtils';\nimport api from './api';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\n// Данные для отслеживания состояния сессии\nconst sessionState = {\n  lastAuth: 0,\n  refreshing: false\n};\nclass AuthService {\n  async login(username, password) {\n    console.log('Attempting login for user:', username);\n    try {\n      const response = await axios.post(`${API_URL}/auth/signin`, {\n        username,\n        password,\n        // Добавляем текущее время к запросу для снижения вероятности кэширования\n        _t: Date.now()\n      });\n      console.log('Login response received:', response.status);\n      if (response.data.accessToken) {\n        console.log('Access token received, saving user data');\n        console.log('Token:', response.data.accessToken.substring(0, 20) + '...');\n\n        // Записываем время последнего получения токена\n        sessionState.lastAuth = Date.now();\n\n        // Сохраняем пользователя в localStorage\n        saveUser(response.data);\n      } else {\n        console.log('No access token in response');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error.message);\n      if (error.response) {\n        console.error('Server response data:', error.response.data);\n      }\n      throw error;\n    }\n  }\n  logout() {\n    console.log('Logging out user');\n    removeUser();\n    // Сбрасываем состояние сессии\n    sessionState.lastAuth = 0;\n    sessionState.refreshing = false;\n  }\n  register(userData) {\n    return axios.post(`${API_URL}/auth/signup`, userData);\n  }\n  getCurrentUser() {\n    const user = getCurrentUser();\n    console.log('Getting current user:', user ? `${user.username} (ID: ${user.id})` : 'No user found');\n    if (user) {\n      console.log('User has token:', !!user.accessToken);\n    }\n    return user;\n  }\n  getAuthHeader() {\n    const user = this.getCurrentUser();\n    if (user && user.accessToken) {\n      // Ensure the token is properly formatted\n      return {\n        'x-access-token': user.accessToken\n      };\n    } else {\n      return {};\n    }\n  }\n\n  // Метод для проверки токена\n  async checkToken() {\n    try {\n      console.log('Checking token validity...');\n\n      // Проверяем, есть ли токен вообще\n      const user = getCurrentUser();\n      if (!user || !user.accessToken) {\n        console.log('No token available to check');\n        return {\n          valid: false,\n          error: 'no_token'\n        };\n      }\n\n      // Добавляем текущее время, чтобы избежать кэширования\n      const response = await api.get(`/debug/check-token?t=${Date.now()}`);\n      console.log('Token check response:', response.data);\n\n      // Если токен валиден, запускаем таймер проверки истечения\n      if (response.data && response.data.message === 'Токен действителен') {\n        setupTokenExpiryTimer();\n      }\n      return {\n        valid: true,\n        data: response.data\n      };\n    } catch (error) {\n      console.error('Token check failed:', error.message);\n\n      // If error is due to unauthorized or token expiration\n      if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n        console.log('Token is invalid or expired');\n        // Clear the invalid token\n        removeUser();\n      }\n      return {\n        valid: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Метод для проверки срока сессии\n  isSessionValid() {\n    const user = getCurrentUser();\n    if (!user || !user.accessToken) {\n      return false;\n    }\n\n    // Если прошло более 2 часов с момента входа, считаем сессию недействительной\n    const sessionDuration = 2 * 60 * 60 * 1000; // 2 часа\n    const now = Date.now();\n    const sessionElapsed = now - sessionState.lastAuth;\n    return sessionState.lastAuth > 0 && sessionElapsed < sessionDuration;\n  }\n}\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["axios","getCurrentUser","saveUser","removeUser","setupTokenExpiryTimer","api","API_URL","process","env","REACT_APP_API_URL","sessionState","lastAuth","refreshing","AuthService","login","username","password","console","log","response","post","_t","Date","now","status","data","accessToken","substring","error","message","logout","register","userData","user","id","getAuthHeader","checkToken","valid","get","isSessionValid","sessionDuration","sessionElapsed","authService"],"sources":["C:/Users/Masha/Desktop/KP/frontend/src/services/auth.service.js"],"sourcesContent":["import axios from 'axios';\nimport { getCurrentUser, saveUser, removeUser, setupTokenExpiryTimer } from '../utils/tokenUtils';\nimport api from './api';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\n// Данные для отслеживания состояния сессии\nconst sessionState = {\n  lastAuth: 0,\n  refreshing: false\n};\n\nclass AuthService {\n  async login(username, password) {\n    console.log('Attempting login for user:', username);\n    try {\n      const response = await axios.post(`${API_URL}/auth/signin`, { \n        username, \n        password,\n        // Добавляем текущее время к запросу для снижения вероятности кэширования\n        _t: Date.now()\n      });\n      console.log('Login response received:', response.status);\n      \n      if (response.data.accessToken) {\n        console.log('Access token received, saving user data');\n        console.log('Token:', response.data.accessToken.substring(0, 20) + '...');\n        \n        // Записываем время последнего получения токена\n        sessionState.lastAuth = Date.now();\n        \n        // Сохраняем пользователя в localStorage\n        saveUser(response.data);\n      } else {\n        console.log('No access token in response');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error.message);\n      if (error.response) {\n        console.error('Server response data:', error.response.data);\n      }\n      throw error;\n    }\n  }\n\n  logout() {\n    console.log('Logging out user');\n    removeUser();\n    // Сбрасываем состояние сессии\n    sessionState.lastAuth = 0;\n    sessionState.refreshing = false;\n  }\n\n  register(userData) {\n    return axios.post(`${API_URL}/auth/signup`, userData);\n  }\n\n  getCurrentUser() {\n    const user = getCurrentUser();\n    console.log('Getting current user:', user ? `${user.username} (ID: ${user.id})` : 'No user found');\n    if (user) {\n      console.log('User has token:', !!user.accessToken);\n    }\n    return user;\n  }\n\n  getAuthHeader() {\n    const user = this.getCurrentUser();\n    if (user && user.accessToken) {\n      // Ensure the token is properly formatted\n      return { 'x-access-token': user.accessToken };\n    } else {\n      return {};\n    }\n  }\n  \n  // Метод для проверки токена\n  async checkToken() {\n    try {\n      console.log('Checking token validity...');\n      \n      // Проверяем, есть ли токен вообще\n      const user = getCurrentUser();\n      if (!user || !user.accessToken) {\n        console.log('No token available to check');\n        return { valid: false, error: 'no_token' };\n      }\n      \n      // Добавляем текущее время, чтобы избежать кэширования\n      const response = await api.get(`/debug/check-token?t=${Date.now()}`);\n      console.log('Token check response:', response.data);\n      \n      // Если токен валиден, запускаем таймер проверки истечения\n      if (response.data && response.data.message === 'Токен действителен') {\n        setupTokenExpiryTimer();\n      }\n      \n      return { valid: true, data: response.data };\n    } catch (error) {\n      console.error('Token check failed:', error.message);\n      \n      // If error is due to unauthorized or token expiration\n      if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n        console.log('Token is invalid or expired');\n        // Clear the invalid token\n        removeUser();\n      }\n      \n      return { valid: false, error: error.message };\n    }\n  }\n  \n  // Метод для проверки срока сессии\n  isSessionValid() {\n    const user = getCurrentUser();\n    if (!user || !user.accessToken) {\n      return false;\n    }\n    \n    // Если прошло более 2 часов с момента входа, считаем сессию недействительной\n    const sessionDuration = 2 * 60 * 60 * 1000; // 2 часа\n    const now = Date.now();\n    const sessionElapsed = now - sessionState.lastAuth;\n    \n    return sessionState.lastAuth > 0 && sessionElapsed < sessionDuration;\n  }\n}\n\nconst authService = new AuthService();\nexport default authService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}