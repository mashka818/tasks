{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Masha\\\\Desktop\\\\KP\\\\frontend\\\\src\\\\pages\\\\AdminPanel.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Table, Button, Form, Modal, Card, Alert, Badge, InputGroup } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { UserService } from '../services';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminPanel() {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [roleSelections, setRoleSelections] = useState({\n    admin: false,\n    manager: false,\n    user: false\n  });\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searching, setSearching] = useState(false);\n\n  // Fetch all users when component mounts\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n  const fetchUsers = async () => {\n    try {\n      setLoading(true);\n      const response = await UserService.getAllUsers();\n      setUsers(response);\n      setError('');\n      setSearchQuery(''); // Сбросить поисковый запрос при обновлении списка\n    } catch (err) {\n      console.error('Error fetching users:', err);\n      setError('Ошибка при получении списка пользователей');\n      toast.error('Не удалось загрузить список пользователей');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSearch = async e => {\n    e.preventDefault();\n    try {\n      // Проверяем, не пуст ли поисковый запрос\n      if (!searchQuery || !searchQuery.trim()) {\n        // Если поле поиска пустое, просто загружаем всех пользователей\n        fetchUsers();\n        return;\n      }\n      setSearching(true);\n      setError(''); // Сбросить предыдущие ошибки\n      console.log('Searching for users with query:', searchQuery);\n\n      // Проверяем длину поискового запроса\n      if (searchQuery.trim().length < 2) {\n        toast.warning('Введите не менее 2 символов для поиска');\n        setSearching(false);\n        return;\n      }\n\n      // Очищаем запрос\n      const cleanQuery = searchQuery.trim();\n      console.log('Clean search query:', cleanQuery);\n      try {\n        // Используем сервис для поиска пользователей\n        const results = await UserService.searchUsers(cleanQuery);\n\n        // Проверяем, что результаты - это массив\n        const validResults = Array.isArray(results) ? results : [];\n        console.log('Search results:', validResults);\n\n        // Устанавливаем результаты\n        setUsers(validResults);\n\n        // Показываем уведомление, если ничего не найдено\n        if (validResults.length === 0) {\n          toast.info(`По запросу \"${cleanQuery}\" ничего не найдено`);\n        }\n      } catch (searchError) {\n        console.error('Search service error:', searchError);\n        toast.error('Не удалось выполнить поиск. Пожалуйста, попробуйте позже.');\n        setUsers([]);\n      }\n    } catch (globalError) {\n      console.error('Global error in search handler:', globalError);\n      toast.error('Произошла ошибка при поиске');\n      setUsers([]);\n    } finally {\n      setSearching(false);\n    }\n  };\n  const clearSearch = () => {\n    setSearchQuery('');\n    fetchUsers();\n  };\n  const handleEditRoles = user => {\n    setSelectedUser(user);\n\n    // Reset role selections\n    const initialRoles = {\n      admin: false,\n      manager: false,\n      user: true // User role is default\n    };\n\n    // Set current roles\n    if (user.roles && Array.isArray(user.roles)) {\n      user.roles.forEach(role => {\n        // Make sure role is a string before using toLowerCase\n        const roleStr = typeof role === 'string' ? role : role && role.name ? role.name : String(role);\n        const roleName = roleStr.toLowerCase().replace('role_', '');\n        if (initialRoles.hasOwnProperty(roleName)) {\n          initialRoles[roleName] = true;\n        }\n      });\n    }\n    setRoleSelections(initialRoles);\n    setShowEditModal(true);\n  };\n  const handleRoleChange = role => {\n    const newSelections = {\n      ...roleSelections,\n      [role]: !roleSelections[role]\n    };\n\n    // Ensure at least one role is selected\n    const hasAnyRole = Object.values(newSelections).some(isSelected => isSelected);\n    if (!hasAnyRole) {\n      toast.warning('Пользователь должен иметь хотя бы одну роль');\n      // Keep the role that was about to be unselected\n      return;\n    }\n\n    // If trying to add admin role, also add user role by default\n    if (role === 'admin' && newSelections.admin && !newSelections.user) {\n      newSelections.user = true;\n    }\n\n    // If trying to add manager role, also add user role by default\n    if (role === 'manager' && newSelections.manager && !newSelections.user) {\n      newSelections.user = true;\n    }\n    setRoleSelections(newSelections);\n  };\n  const saveUserRoles = async () => {\n    try {\n      // Convert role selections to array of role names\n      const selectedRoles = Object.entries(roleSelections).filter(([_, isSelected]) => isSelected).map(([role, _]) => role);\n\n      // Ensure at least one role is selected\n      if (selectedRoles.length === 0) {\n        toast.error('Пользователь должен иметь хотя бы одну роль');\n        return;\n      }\n\n      // If user is removing admin role from themselves, show warning\n      const currentUser = JSON.parse(localStorage.getItem('user'));\n      if (currentUser && currentUser.id === selectedUser.id && selectedUser.roles.some(r => typeof r === 'string' && r.toLowerCase().includes('admin')) && !selectedRoles.includes('admin')) {\n        if (!window.confirm('Вы собираетесь удалить права администратора у своей учетной записи. Это действие может привести к потере доступа к панели администратора. Продолжить?')) {\n          return;\n        }\n      }\n      console.log('Sending role update with roles:', selectedRoles);\n      const result = await UserService.updateUserRoles(selectedUser.id, selectedRoles);\n      console.log('Role update response:', result);\n      toast.success('Роли пользователя обновлены');\n      setShowEditModal(false);\n\n      // Refresh the user list to ensure data consistency\n      fetchUsers();\n    } catch (err) {\n      console.error('Error updating user roles:', err);\n\n      // Show more detailed error information if available\n      let errorMessage = 'Ошибка при обновлении ролей пользователя';\n      if (err.response && err.response.data && err.response.data.message) {\n        errorMessage += `: ${err.response.data.message}`;\n      }\n      toast.error(errorMessage);\n    }\n  };\n  const getRoleBadges = userRoles => {\n    if (!userRoles || userRoles.length === 0) {\n      return /*#__PURE__*/_jsxDEV(Badge, {\n        bg: \"secondary\",\n        children: \"\\u041D\\u0435\\u0442 \\u0440\\u043E\\u043B\\u0435\\u0439\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 14\n      }, this);\n    }\n    return userRoles.map(role => {\n      // Make sure role is a string before using replace\n      const roleStr = typeof role === 'string' ? role : role && role.name ? role.name : String(role);\n      const roleName = roleStr.replace('ROLE_', '').toLowerCase();\n      let badgeColor = 'secondary';\n      switch (roleName) {\n        case 'admin':\n          badgeColor = 'danger';\n          break;\n        case 'manager':\n          badgeColor = 'primary';\n          break;\n        case 'user':\n          badgeColor = 'success';\n          break;\n        default:\n          badgeColor = 'info';\n      }\n      return /*#__PURE__*/_jsxDEV(Badge, {\n        bg: badgeColor,\n        className: \"me-1\",\n        children: roleName\n      }, roleStr, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center mt-5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border\",\n        role: \"status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"mb-4\",\n      children: \"\\u041F\\u0430\\u043D\\u0435\\u043B\\u044C \\u0430\\u0434\\u043C\\u0438\\u043D\\u0438\\u0441\\u0442\\u0440\\u0430\\u0442\\u043E\\u0440\\u0430\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"mb-0\",\n          children: \"\\u0423\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\\u043C\\u0438\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n          variant: \"danger\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-between mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            onClick: fetchUsers,\n            disabled: loading || searching,\n            children: loading ? \"Загрузка...\" : \"Обновить список\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: handleSearch,\n            className: \"d-flex\",\n            children: /*#__PURE__*/_jsxDEV(InputGroup, {\n              children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                placeholder: \"\\u041F\\u043E\\u0438\\u0441\\u043A \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u0435\\u0439...\",\n                value: searchQuery,\n                onChange: e => setSearchQuery(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 17\n              }, this), searchQuery && /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outline-secondary\",\n                onClick: clearSearch,\n                children: \"\\u2715\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outline-primary\",\n                type: \"submit\",\n                disabled: searching,\n                children: searching ? \"Поиск...\" : \"Поиск\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), users.length === 0 ? /*#__PURE__*/_jsxDEV(Alert, {\n          variant: \"info\",\n          children: searchQuery ? `Пользователи по запросу \"${searchQuery}\" не найдены` : \"Пользователи не найдены\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Table, {\n          responsive: true,\n          striped: true,\n          hover: true,\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u0418\\u043C\\u044F \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u0424\\u0418\\u041E\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u0420\\u043E\\u043B\\u0438\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 310,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u0414\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u044F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: users.map(user => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: user.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 317,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: user.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: user.fullName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: user.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: getRoleBadges(user.roles)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outline-primary\",\n                  size: \"sm\",\n                  onClick: () => handleEditRoles(user),\n                  children: \"\\u0418\\u0437\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C \\u0440\\u043E\\u043B\\u0438\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 323,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 21\n              }, this)]\n            }, user.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showEditModal,\n      onHide: () => setShowEditModal(false),\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: [\"\\u0418\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u0435 \\u0440\\u043E\\u043B\\u0435\\u0439 \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F \", selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"\\u0420\\u043E\\u043B\\u0438 \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n                type: \"checkbox\",\n                id: \"role-admin\",\n                label: \"\\u0410\\u0434\\u043C\\u0438\\u043D\\u0438\\u0441\\u0442\\u0440\\u0430\\u0442\\u043E\\u0440\",\n                checked: roleSelections.admin,\n                onChange: () => handleRoleChange('admin'),\n                className: \"mb-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n                type: \"checkbox\",\n                id: \"role-manager\",\n                label: \"\\u041C\\u0435\\u043D\\u0435\\u0434\\u0436\\u0435\\u0440\",\n                checked: roleSelections.manager,\n                onChange: () => handleRoleChange('manager'),\n                className: \"mb-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n                type: \"checkbox\",\n                id: \"role-user\",\n                label: \"\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C\",\n                checked: roleSelections.user,\n                onChange: () => handleRoleChange('user')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: () => setShowEditModal(false),\n          children: \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: saveUserRoles,\n          children: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminPanel, \"TpECeIxmSSOiH80WI6FVcphRF0M=\");\n_c = AdminPanel;\nexport default AdminPanel;\nvar _c;\n$RefreshReg$(_c, \"AdminPanel\");","map":{"version":3,"names":["React","useState","useEffect","Table","Button","Form","Modal","Card","Alert","Badge","InputGroup","toast","UserService","jsxDEV","_jsxDEV","AdminPanel","_s","users","setUsers","loading","setLoading","error","setError","showEditModal","setShowEditModal","selectedUser","setSelectedUser","roleSelections","setRoleSelections","admin","manager","user","searchQuery","setSearchQuery","searching","setSearching","fetchUsers","response","getAllUsers","err","console","handleSearch","e","preventDefault","trim","log","length","warning","cleanQuery","results","searchUsers","validResults","Array","isArray","info","searchError","globalError","clearSearch","handleEditRoles","initialRoles","roles","forEach","role","roleStr","name","String","roleName","toLowerCase","replace","hasOwnProperty","handleRoleChange","newSelections","hasAnyRole","Object","values","some","isSelected","saveUserRoles","selectedRoles","entries","filter","_","map","currentUser","JSON","parse","localStorage","getItem","id","r","includes","window","confirm","result","updateUserRoles","success","errorMessage","data","message","getRoleBadges","userRoles","bg","children","fileName","_jsxFileName","lineNumber","columnNumber","badgeColor","className","Header","Body","variant","onClick","disabled","onSubmit","Control","type","placeholder","value","onChange","target","responsive","striped","hover","username","fullName","email","size","show","onHide","closeButton","Title","Group","Label","Check","label","checked","Footer","_c","$RefreshReg$"],"sources":["C:/Users/Masha/Desktop/KP/frontend/src/pages/AdminPanel.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Table, Button, Form, Modal, Card, Alert, Badge, InputGroup } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { UserService } from '../services';\r\n\r\nfunction AdminPanel() {\r\n  const [users, setUsers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [showEditModal, setShowEditModal] = useState(false);\r\n  const [selectedUser, setSelectedUser] = useState(null);\r\n  const [roleSelections, setRoleSelections] = useState({\r\n    admin: false,\r\n    manager: false,\r\n    user: false\r\n  });\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [searching, setSearching] = useState(false);\r\n\r\n  // Fetch all users when component mounts\r\n  useEffect(() => {\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await UserService.getAllUsers();\r\n      setUsers(response);\r\n      setError('');\r\n      setSearchQuery(''); // Сбросить поисковый запрос при обновлении списка\r\n    } catch (err) {\r\n      console.error('Error fetching users:', err);\r\n      setError('Ошибка при получении списка пользователей');\r\n      toast.error('Не удалось загрузить список пользователей');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    try {\r\n      // Проверяем, не пуст ли поисковый запрос\r\n      if (!searchQuery || !searchQuery.trim()) {\r\n        // Если поле поиска пустое, просто загружаем всех пользователей\r\n        fetchUsers();\r\n        return;\r\n      }\r\n      \r\n      setSearching(true);\r\n      setError(''); // Сбросить предыдущие ошибки\r\n      console.log('Searching for users with query:', searchQuery);\r\n      \r\n      // Проверяем длину поискового запроса\r\n      if (searchQuery.trim().length < 2) {\r\n        toast.warning('Введите не менее 2 символов для поиска');\r\n        setSearching(false);\r\n        return;\r\n      }\r\n      \r\n      // Очищаем запрос\r\n      const cleanQuery = searchQuery.trim();\r\n      console.log('Clean search query:', cleanQuery);\r\n      \r\n      try {\r\n        // Используем сервис для поиска пользователей\r\n        const results = await UserService.searchUsers(cleanQuery);\r\n        \r\n        // Проверяем, что результаты - это массив\r\n        const validResults = Array.isArray(results) ? results : [];\r\n        console.log('Search results:', validResults);\r\n        \r\n        // Устанавливаем результаты\r\n        setUsers(validResults);\r\n        \r\n        // Показываем уведомление, если ничего не найдено\r\n        if (validResults.length === 0) {\r\n          toast.info(`По запросу \"${cleanQuery}\" ничего не найдено`);\r\n        }\r\n      } catch (searchError) {\r\n        console.error('Search service error:', searchError);\r\n        toast.error('Не удалось выполнить поиск. Пожалуйста, попробуйте позже.');\r\n        setUsers([]);\r\n      }\r\n    } catch (globalError) {\r\n      console.error('Global error in search handler:', globalError);\r\n      toast.error('Произошла ошибка при поиске');\r\n      setUsers([]);\r\n    } finally {\r\n      setSearching(false);\r\n    }\r\n  };\r\n\r\n  const clearSearch = () => {\r\n    setSearchQuery('');\r\n    fetchUsers();\r\n  };\r\n\r\n  const handleEditRoles = (user) => {\r\n    setSelectedUser(user);\r\n    \r\n    // Reset role selections\r\n    const initialRoles = {\r\n      admin: false,\r\n      manager: false,\r\n      user: true // User role is default\r\n    };\r\n    \r\n    // Set current roles\r\n    if (user.roles && Array.isArray(user.roles)) {\r\n      user.roles.forEach(role => {\r\n        // Make sure role is a string before using toLowerCase\r\n        const roleStr = typeof role === 'string' ? role : \r\n                       (role && role.name ? role.name : String(role));\r\n        const roleName = roleStr.toLowerCase().replace('role_', '');\r\n        if (initialRoles.hasOwnProperty(roleName)) {\r\n          initialRoles[roleName] = true;\r\n        }\r\n      });\r\n    }\r\n    \r\n    setRoleSelections(initialRoles);\r\n    setShowEditModal(true);\r\n  };\r\n\r\n  const handleRoleChange = (role) => {\r\n    const newSelections = {\r\n      ...roleSelections,\r\n      [role]: !roleSelections[role]\r\n    };\r\n    \r\n    // Ensure at least one role is selected\r\n    const hasAnyRole = Object.values(newSelections).some(isSelected => isSelected);\r\n    \r\n    if (!hasAnyRole) {\r\n      toast.warning('Пользователь должен иметь хотя бы одну роль');\r\n      // Keep the role that was about to be unselected\r\n      return;\r\n    }\r\n    \r\n    // If trying to add admin role, also add user role by default\r\n    if (role === 'admin' && newSelections.admin && !newSelections.user) {\r\n      newSelections.user = true;\r\n    }\r\n    \r\n    // If trying to add manager role, also add user role by default\r\n    if (role === 'manager' && newSelections.manager && !newSelections.user) {\r\n      newSelections.user = true;\r\n    }\r\n    \r\n    setRoleSelections(newSelections);\r\n  };\r\n\r\n  const saveUserRoles = async () => {\r\n    try {\r\n      // Convert role selections to array of role names\r\n      const selectedRoles = Object.entries(roleSelections)\r\n        .filter(([_, isSelected]) => isSelected)\r\n        .map(([role, _]) => role);\r\n\r\n      // Ensure at least one role is selected\r\n      if (selectedRoles.length === 0) {\r\n        toast.error('Пользователь должен иметь хотя бы одну роль');\r\n        return;\r\n      }\r\n      \r\n      // If user is removing admin role from themselves, show warning\r\n      const currentUser = JSON.parse(localStorage.getItem('user'));\r\n      if (currentUser && \r\n          currentUser.id === selectedUser.id && \r\n          selectedUser.roles.some(r => typeof r === 'string' && r.toLowerCase().includes('admin')) &&\r\n          !selectedRoles.includes('admin')) {\r\n        if (!window.confirm('Вы собираетесь удалить права администратора у своей учетной записи. Это действие может привести к потере доступа к панели администратора. Продолжить?')) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      console.log('Sending role update with roles:', selectedRoles);\r\n      \r\n      const result = await UserService.updateUserRoles(selectedUser.id, selectedRoles);\r\n      console.log('Role update response:', result);\r\n      \r\n      toast.success('Роли пользователя обновлены');\r\n      setShowEditModal(false);\r\n      \r\n      // Refresh the user list to ensure data consistency\r\n      fetchUsers();\r\n    } catch (err) {\r\n      console.error('Error updating user roles:', err);\r\n      \r\n      // Show more detailed error information if available\r\n      let errorMessage = 'Ошибка при обновлении ролей пользователя';\r\n      if (err.response && err.response.data && err.response.data.message) {\r\n        errorMessage += `: ${err.response.data.message}`;\r\n      }\r\n      \r\n      toast.error(errorMessage);\r\n    }\r\n  };\r\n\r\n  const getRoleBadges = (userRoles) => {\r\n    if (!userRoles || userRoles.length === 0) {\r\n      return <Badge bg=\"secondary\">Нет ролей</Badge>;\r\n    }\r\n    \r\n    return userRoles.map(role => {\r\n      // Make sure role is a string before using replace\r\n      const roleStr = typeof role === 'string' ? role : \r\n                     (role && role.name ? role.name : String(role));\r\n      const roleName = roleStr.replace('ROLE_', '').toLowerCase();\r\n      let badgeColor = 'secondary';\r\n      \r\n      switch (roleName) {\r\n        case 'admin':\r\n          badgeColor = 'danger';\r\n          break;\r\n        case 'manager':\r\n          badgeColor = 'primary';\r\n          break;\r\n        case 'user':\r\n          badgeColor = 'success';\r\n          break;\r\n        default:\r\n          badgeColor = 'info';\r\n      }\r\n      \r\n      return (\r\n        <Badge bg={badgeColor} className=\"me-1\" key={roleStr}>\r\n          {roleName}\r\n        </Badge>\r\n      );\r\n    });\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"d-flex justify-content-center mt-5\">\r\n        <div className=\"spinner-border\" role=\"status\">\r\n          <span className=\"visually-hidden\">Loading...</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"page-container\">\r\n      <h1 className=\"mb-4\">Панель администратора</h1>\r\n      \r\n      <Card className=\"mb-4\">\r\n        <Card.Header>\r\n          <h5 className=\"mb-0\">Управление пользователями</h5>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          {error && (\r\n            <Alert variant=\"danger\">\r\n              {error}\r\n            </Alert>\r\n          )}\r\n          \r\n          <div className=\"d-flex justify-content-between mb-3\">\r\n            <Button \r\n              variant=\"primary\"\r\n              onClick={fetchUsers}\r\n              disabled={loading || searching}\r\n            >\r\n              {loading ? \"Загрузка...\" : \"Обновить список\"}\r\n            </Button>\r\n            \r\n            <Form onSubmit={handleSearch} className=\"d-flex\">\r\n              <InputGroup>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Поиск пользователей...\"\r\n                  value={searchQuery}\r\n                  onChange={(e) => setSearchQuery(e.target.value)}\r\n                />\r\n                {searchQuery && (\r\n                  <Button \r\n                    variant=\"outline-secondary\" \r\n                    onClick={clearSearch}\r\n                  >\r\n                    ✕\r\n                  </Button>\r\n                )}\r\n                <Button \r\n                  variant=\"outline-primary\" \r\n                  type=\"submit\"\r\n                  disabled={searching}\r\n                >\r\n                  {searching ? \"Поиск...\" : \"Поиск\"}\r\n                </Button>\r\n              </InputGroup>\r\n            </Form>\r\n          </div>\r\n          \r\n          {users.length === 0 ? (\r\n            <Alert variant=\"info\">\r\n              {searchQuery ? `Пользователи по запросу \"${searchQuery}\" не найдены` : \"Пользователи не найдены\"}\r\n            </Alert>\r\n          ) : (\r\n            <Table responsive striped hover>\r\n              <thead>\r\n                <tr>\r\n                  <th>ID</th>\r\n                  <th>Имя пользователя</th>\r\n                  <th>ФИО</th>\r\n                  <th>Email</th>\r\n                  <th>Роли</th>\r\n                  <th>Действия</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {users.map(user => (\r\n                  <tr key={user.id}>\r\n                    <td>{user.id}</td>\r\n                    <td>{user.username}</td>\r\n                    <td>{user.fullName}</td>\r\n                    <td>{user.email}</td>\r\n                    <td>{getRoleBadges(user.roles)}</td>\r\n                    <td>\r\n                      <Button\r\n                        variant=\"outline-primary\"\r\n                        size=\"sm\"\r\n                        onClick={() => handleEditRoles(user)}\r\n                      >\r\n                        Изменить роли\r\n                      </Button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          )}\r\n        </Card.Body>\r\n      </Card>\r\n      \r\n      {/* Modal for editing user roles */}\r\n      <Modal show={showEditModal} onHide={() => setShowEditModal(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n            Изменение ролей пользователя {selectedUser?.username}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Group className=\"mb-3\">\r\n              <Form.Label>Роли пользователя</Form.Label>\r\n              <div>\r\n                <Form.Check \r\n                  type=\"checkbox\"\r\n                  id=\"role-admin\"\r\n                  label=\"Администратор\"\r\n                  checked={roleSelections.admin}\r\n                  onChange={() => handleRoleChange('admin')}\r\n                  className=\"mb-2\"\r\n                />\r\n                <Form.Check \r\n                  type=\"checkbox\"\r\n                  id=\"role-manager\"\r\n                  label=\"Менеджер\"\r\n                  checked={roleSelections.manager}\r\n                  onChange={() => handleRoleChange('manager')}\r\n                  className=\"mb-2\"\r\n                />\r\n                <Form.Check \r\n                  type=\"checkbox\"\r\n                  id=\"role-user\"\r\n                  label=\"Пользователь\"\r\n                  checked={roleSelections.user}\r\n                  onChange={() => handleRoleChange('user')}\r\n                />\r\n              </div>\r\n            </Form.Group>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowEditModal(false)}>\r\n            Отмена\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={saveUserRoles}>\r\n            Сохранить\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminPanel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}