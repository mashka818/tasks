{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Masha\\\\Desktop\\\\KP\\\\frontend\\\\src\\\\components\\\\AdminRoute.js\";\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\n// AdminRoute is a wrapper component that checks if the user has an admin role\n// If not, it redirects to the dashboard page\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminRoute = ({\n  user,\n  children\n}) => {\n  // Function to check if user has admin role\n  const isAdmin = () => {\n    if (!user || !user.roles) return false;\n    return user.roles.some(role => role === 'admin' || role === 'ROLE_ADMIN');\n  };\n  if (!user) {\n    toast.error('Требуется авторизация');\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 12\n    }, this);\n  }\n  if (!isAdmin()) {\n    toast.error('Доступ запрещен. Требуются права администратора');\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  }\n  return children;\n};\n_c = AdminRoute;\nexport default AdminRoute;\nvar _c;\n$RefreshReg$(_c, \"AdminRoute\");","map":{"version":3,"names":["React","Navigate","toast","jsxDEV","_jsxDEV","AdminRoute","user","children","isAdmin","roles","some","role","error","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Masha/Desktop/KP/frontend/src/components/AdminRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\n\r\n// AdminRoute is a wrapper component that checks if the user has an admin role\r\n// If not, it redirects to the dashboard page\r\nconst AdminRoute = ({ user, children }) => {\r\n  // Function to check if user has admin role\r\n  const isAdmin = () => {\r\n    if (!user || !user.roles) return false;\r\n    \r\n    return user.roles.some(role => \r\n      role === 'admin' || \r\n      role === 'ROLE_ADMIN'\r\n    );\r\n  };\r\n\r\n  if (!user) {\r\n    toast.error('Требуется авторизация');\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  if (!isAdmin()) {\r\n    toast.error('Доступ запрещен. Требуются права администратора');\r\n    return <Navigate to=\"/dashboard\" />;\r\n  }\r\n\r\n  return children;\r\n};\r\n\r\nexport default AdminRoute; "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,KAAK,QAAQ,gBAAgB;;AAEtC;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,UAAU,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAS,CAAC,KAAK;EACzC;EACA,MAAMC,OAAO,GAAGA,CAAA,KAAM;IACpB,IAAI,CAACF,IAAI,IAAI,CAACA,IAAI,CAACG,KAAK,EAAE,OAAO,KAAK;IAEtC,OAAOH,IAAI,CAACG,KAAK,CAACC,IAAI,CAACC,IAAI,IACzBA,IAAI,KAAK,OAAO,IAChBA,IAAI,KAAK,YACX,CAAC;EACH,CAAC;EAED,IAAI,CAACL,IAAI,EAAE;IACTJ,KAAK,CAACU,KAAK,CAAC,uBAAuB,CAAC;IACpC,oBAAOR,OAAA,CAACH,QAAQ;MAACY,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjC;EAEA,IAAI,CAACT,OAAO,CAAC,CAAC,EAAE;IACdN,KAAK,CAACU,KAAK,CAAC,iDAAiD,CAAC;IAC9D,oBAAOR,OAAA,CAACH,QAAQ;MAACY,EAAE,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACrC;EAEA,OAAOV,QAAQ;AACjB,CAAC;AAACW,EAAA,GAtBIb,UAAU;AAwBhB,eAAeA,UAAU;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}