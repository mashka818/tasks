{"ast":null,"code":"import api from './api';\nclass UserService {\n  // Get all users (for admin purposes only)\n  async getAllUsers() {\n    const response = await api.get('/admin/users');\n    return response.data;\n  }\n\n  // Search users by query\n  async searchUsers(query, retryCount = 0) {\n    try {\n      // Проверяем, не пустой ли запрос\n      if (!query || !query.trim()) {\n        return []; // Возвращаем пустой массив вместо ошибки\n      }\n\n      // Проверяем минимальную длину запроса\n      if (query.trim().length < 2) {\n        console.log('Search query too short, minimum 2 characters required');\n        return []; // Возвращаем пустой массив для коротких запросов\n      }\n\n      // Используем безопасное кодирование URI\n      const trimmedQuery = query.trim();\n      const encodedQuery = encodeURIComponent(trimmedQuery);\n      console.log('Encoded search query:', encodedQuery);\n      try {\n        // Увеличиваем таймаут для проблемных запросов\n        const response = await api.get(`/admin/users/search?query=${encodedQuery}`, {\n          timeout: 30000 // Увеличиваем таймаут для поисковых запросов\n        });\n\n        // Проверяем тип ответа - должен быть массив\n        if (Array.isArray(response.data)) {\n          console.log('Received valid array response, length:', response.data.length);\n          return response.data;\n        } else if (response.data && response.data.results && Array.isArray(response.data.results)) {\n          console.log('Received results in data object, length:', response.data.results.length);\n          return response.data.results;\n        } else {\n          console.log('Received non-array response:', response.data);\n          // Если получили не массив, возвращаем пустой массив вместо ошибки\n          return [];\n        }\n      } catch (requestError) {\n        console.error('Error in searchUsers service:', requestError);\n\n        // Выводим больше деталей об ошибке\n        if (requestError.response) {\n          console.log('Response status:', requestError.response.status);\n          console.log('Response data:', requestError.response.data);\n        }\n\n        // Если это ошибка сервера (500) и у нас есть еще попытки, пробуем снова\n        if (requestError.response && requestError.response.status === 500 && retryCount < 3) {\n          console.log(`Retry attempt ${retryCount + 1} for search query`);\n\n          // Увеличиваем задержку перед повторными попытками\n          await new Promise(resolve => setTimeout(resolve, 2000 * (retryCount + 1)));\n\n          // Рекурсивно вызываем себя с увеличенным счетчиком повторов\n          return this.searchUsers(query, retryCount + 1);\n        }\n\n        // Если все попытки исчерпаны или это не ошибка 500, возвращаем пустой массив\n        return [];\n      }\n    } catch (error) {\n      console.error('Global error in searchUsers service:', error);\n      return []; // Возвращаем пустой массив при любой ошибке\n    }\n  }\n\n  // Get user details by ID\n  async getUserById(id) {\n    const response = await api.get(`/admin/users/${id}`);\n    return response.data;\n  }\n\n  // Update user roles\n  async updateUserRoles(userId, roles) {\n    const response = await api.put(`/admin/users/${userId}/roles`, {\n      roles\n    });\n    return response.data;\n  }\n\n  // Update user status (active/inactive)\n  async updateUserStatus(userId, isActive) {\n    const response = await api.put(`/admin/users/${userId}/status`, {\n      isActive\n    });\n    return response.data;\n  }\n\n  // Upload profile image\n  async uploadProfileImage(imageFile) {\n    const formData = new FormData();\n    formData.append('profileImage', imageFile);\n    const response = await api.post('/user/profile/image', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n\n  // Get all workers (for task assignment)\n  async getAllWorkers() {\n    const response = await api.get('/workers');\n    return response.data;\n  }\n\n  // Search workers by name, username, or position\n  async searchWorkers(query) {\n    try {\n      if (!query || query.trim().length < 2) {\n        return [];\n      }\n      const response = await api.get(`/workers/search?query=${encodeURIComponent(query.trim())}`);\n      return Array.isArray(response.data) ? response.data : [];\n    } catch (error) {\n      console.error('Error searching workers:', error);\n      return [];\n    }\n  }\n\n  // Get all managers\n  async getAllManagers() {\n    const response = await api.get('/admin/managers');\n    return response.data;\n  }\n}\nexport default new UserService();","map":{"version":3,"names":["api","UserService","getAllUsers","response","get","data","searchUsers","query","retryCount","trim","length","console","log","trimmedQuery","encodedQuery","encodeURIComponent","timeout","Array","isArray","results","requestError","error","status","Promise","resolve","setTimeout","getUserById","id","updateUserRoles","userId","roles","put","updateUserStatus","isActive","uploadProfileImage","imageFile","formData","FormData","append","post","headers","getAllWorkers","searchWorkers","getAllManagers"],"sources":["C:/Users/Masha/Desktop/KP/frontend/src/services/user.service.js"],"sourcesContent":["import api from './api';\r\n\r\nclass UserService {\r\n  // Get all users (for admin purposes only)\r\n  async getAllUsers() {\r\n    const response = await api.get('/admin/users');\r\n    return response.data;\r\n  }\r\n\r\n  // Search users by query\r\n  async searchUsers(query, retryCount = 0) {\r\n    try {\r\n      // Проверяем, не пустой ли запрос\r\n      if (!query || !query.trim()) {\r\n        return []; // Возвращаем пустой массив вместо ошибки\r\n      }\r\n      \r\n      // Проверяем минимальную длину запроса\r\n      if (query.trim().length < 2) {\r\n        console.log('Search query too short, minimum 2 characters required');\r\n        return []; // Возвращаем пустой массив для коротких запросов\r\n      }\r\n      \r\n      // Используем безопасное кодирование URI\r\n      const trimmedQuery = query.trim();\r\n      const encodedQuery = encodeURIComponent(trimmedQuery);\r\n      console.log('Encoded search query:', encodedQuery);\r\n      \r\n      try {\r\n        // Увеличиваем таймаут для проблемных запросов\r\n        const response = await api.get(`/admin/users/search?query=${encodedQuery}`, {\r\n          timeout: 30000, // Увеличиваем таймаут для поисковых запросов\r\n        });\r\n        \r\n        // Проверяем тип ответа - должен быть массив\r\n        if (Array.isArray(response.data)) {\r\n          console.log('Received valid array response, length:', response.data.length);\r\n          return response.data;\r\n        } else if (response.data && response.data.results && Array.isArray(response.data.results)) {\r\n          console.log('Received results in data object, length:', response.data.results.length);\r\n          return response.data.results;\r\n        } else {\r\n          console.log('Received non-array response:', response.data);\r\n          // Если получили не массив, возвращаем пустой массив вместо ошибки\r\n          return [];\r\n        }\r\n      } catch (requestError) {\r\n        console.error('Error in searchUsers service:', requestError);\r\n        \r\n        // Выводим больше деталей об ошибке\r\n        if (requestError.response) {\r\n          console.log('Response status:', requestError.response.status);\r\n          console.log('Response data:', requestError.response.data);\r\n        }\r\n        \r\n        // Если это ошибка сервера (500) и у нас есть еще попытки, пробуем снова\r\n        if (requestError.response && requestError.response.status === 500 && retryCount < 3) {\r\n          console.log(`Retry attempt ${retryCount + 1} for search query`);\r\n          \r\n          // Увеличиваем задержку перед повторными попытками\r\n          await new Promise(resolve => setTimeout(resolve, 2000 * (retryCount + 1)));\r\n          \r\n          // Рекурсивно вызываем себя с увеличенным счетчиком повторов\r\n          return this.searchUsers(query, retryCount + 1);\r\n        }\r\n        \r\n        // Если все попытки исчерпаны или это не ошибка 500, возвращаем пустой массив\r\n        return [];\r\n      }\r\n    } catch (error) {\r\n      console.error('Global error in searchUsers service:', error);\r\n      return []; // Возвращаем пустой массив при любой ошибке\r\n    }\r\n  }\r\n\r\n  // Get user details by ID\r\n  async getUserById(id) {\r\n    const response = await api.get(`/admin/users/${id}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Update user roles\r\n  async updateUserRoles(userId, roles) {\r\n    const response = await api.put(`/admin/users/${userId}/roles`, { roles });\r\n    return response.data;\r\n  }\r\n\r\n  // Update user status (active/inactive)\r\n  async updateUserStatus(userId, isActive) {\r\n    const response = await api.put(`/admin/users/${userId}/status`, { isActive });\r\n    return response.data;\r\n  }\r\n\r\n  // Upload profile image\r\n  async uploadProfileImage(imageFile) {\r\n    const formData = new FormData();\r\n    formData.append('profileImage', imageFile);\r\n    \r\n    const response = await api.post('/user/profile/image', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  // Get all workers (for task assignment)\r\n  async getAllWorkers() {\r\n    const response = await api.get('/workers');\r\n    return response.data;\r\n  }\r\n\r\n  // Search workers by name, username, or position\r\n  async searchWorkers(query) {\r\n    try {\r\n      if (!query || query.trim().length < 2) {\r\n        return [];\r\n      }\r\n      \r\n      const response = await api.get(`/workers/search?query=${encodeURIComponent(query.trim())}`);\r\n      return Array.isArray(response.data) ? response.data : [];\r\n    } catch (error) {\r\n      console.error('Error searching workers:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Get all managers\r\n  async getAllManagers() {\r\n    const response = await api.get('/admin/managers');\r\n    return response.data;\r\n  }\r\n}\r\n\r\nexport default new UserService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}