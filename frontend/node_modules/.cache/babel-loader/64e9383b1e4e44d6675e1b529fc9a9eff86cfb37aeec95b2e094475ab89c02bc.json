{"ast":null,"code":"/**\r\n * Utility functions for handling authentication tokens\r\n */\n\n// Глобальный объект для хранения информации о токене\nconst tokenInfo = {\n  tokenTimer: null,\n  tokenRefreshTimer: null,\n  tokenExpiryWarningShown: false\n};\n\n/**\r\n * Get the current user from localStorage\r\n * @returns {Object|null} The user object or null if not found\r\n */\nexport const getCurrentUser = () => {\n  const userStr = localStorage.getItem('user');\n  if (userStr) {\n    try {\n      return JSON.parse(userStr);\n    } catch (error) {\n      console.error('Error parsing user from localStorage:', error);\n      return null;\n    }\n  }\n  return null;\n};\n\n/**\r\n * Get the authentication token from localStorage\r\n * @returns {string|null} The token or null if not found\r\n */\nexport const getToken = () => {\n  const user = getCurrentUser();\n  return (user === null || user === void 0 ? void 0 : user.accessToken) || null;\n};\n\n/**\r\n * Save user data (including token) to localStorage\r\n * @param {Object} userData The user data to save\r\n */\nexport const saveUser = userData => {\n  if (userData) {\n    localStorage.setItem('user', JSON.stringify(userData));\n\n    // Устанавливаем таймер для проверки срока действия токена\n    // и предупреждения пользователя перед истечением\n    setupTokenExpiryTimer(userData.tokenExpiry);\n  }\n};\n\n/**\r\n * Remove user data and token from localStorage\r\n */\nexport const removeUser = () => {\n  localStorage.removeItem('user');\n  clearTokenTimers();\n};\n\n/**\r\n * Update token in axios headers\r\n * @param {Object} api The axios instance\r\n * @param {string} token The token to set\r\n */\nexport const setAuthHeader = (api, token) => {\n  if (token) {\n    api.defaults.headers.common['x-access-token'] = token;\n  } else {\n    delete api.defaults.headers.common['x-access-token'];\n  }\n};\n\n/**\r\n * Обновляет только токен пользователя, сохраняя остальные данные\r\n * @param {string} newToken Новый токен доступа\r\n * @param {number} tokenExpiry Срок действия нового токена в секундах\r\n */\nexport const updateToken = (newToken, tokenExpiry) => {\n  const user = getCurrentUser();\n  if (user && newToken) {\n    user.accessToken = newToken;\n\n    // Сохраняем информацию о сроке действия токена, если она предоставлена\n    if (tokenExpiry) {\n      user.tokenExpiry = tokenExpiry;\n    }\n    localStorage.setItem('user', JSON.stringify(user));\n\n    // Обновляем таймеры для нового токена\n    setupTokenExpiryTimer(tokenExpiry);\n    console.log('Token updated successfully');\n    return true;\n  }\n  return false;\n};\n\n/**\r\n * Настройка таймера для проверки срока истечения токена\r\n * @param {number} tokenExpirySeconds Срок действия токена в секундах\r\n */\nexport const setupTokenExpiryTimer = tokenExpirySeconds => {\n  // Очищаем предыдущий таймер, если он был\n  clearTokenTimers();\n\n  // Получаем срок действия токена из параметра или используем значение по умолчанию\n  const tokenLifetime = (tokenExpirySeconds || 7200) * 1000; // в миллисекундах\n\n  console.log(`Setting up token expiry timer for ${tokenLifetime / 1000} seconds`);\n\n  // Время предупреждения - за 5 минут до истечения\n  const warningBeforeExpiry = 5 * 60 * 1000; // 5 минут\n\n  // Время для обновления токена - за 10 минут до истечения\n  const refreshBeforeExpiry = 10 * 60 * 1000; // 10 минут\n\n  // Устанавливаем таймер для автоматического обновления токена\n  if (tokenLifetime > refreshBeforeExpiry) {\n    tokenInfo.tokenRefreshTimer = setTimeout(() => {\n      console.log('Attempting to refresh token before expiry');\n      // Импортируем сервис аутентификации динамически чтобы избежать циклических зависимостей\n      import('../services/auth.service').then(module => {\n        const authService = module.default;\n        authService.refreshToken();\n      });\n    }, tokenLifetime - refreshBeforeExpiry);\n  }\n\n  // Устанавливаем таймер для предупреждения\n  if (tokenLifetime > warningBeforeExpiry) {\n    tokenInfo.tokenTimer = setTimeout(() => {\n      // Предупреждаем пользователя об истечении срока токена\n      if (!tokenInfo.tokenExpiryWarningShown) {\n        console.log('Token will expire soon, user should re-login');\n        // Показываем системное уведомление, если возможно\n        if ('Notification' in window && Notification.permission === 'granted') {\n          new Notification('Предупреждение о сессии', {\n            body: 'Ваша сессия скоро истечет. Пожалуйста, сохраните данные и войдите заново.'\n          });\n        }\n\n        // Отмечаем, что предупреждение показано\n        tokenInfo.tokenExpiryWarningShown = true;\n      }\n    }, tokenLifetime - warningBeforeExpiry);\n  }\n};\n\n/**\r\n * Очистка всех таймеров, связанных с токеном\r\n */\nexport const clearTokenTimers = () => {\n  if (tokenInfo.tokenTimer) {\n    clearTimeout(tokenInfo.tokenTimer);\n    tokenInfo.tokenTimer = null;\n  }\n  if (tokenInfo.tokenRefreshTimer) {\n    clearTimeout(tokenInfo.tokenRefreshTimer);\n    tokenInfo.tokenRefreshTimer = null;\n  }\n  tokenInfo.tokenExpiryWarningShown = false;\n};\n\n/**\r\n * Обновляет объект пользователя с новыми данными, сохраняя существующий токен\r\n * @param {Object} userUpdate - Новые данные пользователя\r\n */\nexport const updateUserData = userUpdate => {\n  const currentUser = getCurrentUser();\n  if (currentUser && userUpdate) {\n    // Сохраняем текущий токен\n    const updatedUser = {\n      ...currentUser,\n      ...userUpdate\n    };\n    localStorage.setItem('user', JSON.stringify(updatedUser));\n  }\n};","map":{"version":3,"names":["tokenInfo","tokenTimer","tokenRefreshTimer","tokenExpiryWarningShown","getCurrentUser","userStr","localStorage","getItem","JSON","parse","error","console","getToken","user","accessToken","saveUser","userData","setItem","stringify","setupTokenExpiryTimer","tokenExpiry","removeUser","removeItem","clearTokenTimers","setAuthHeader","api","token","defaults","headers","common","updateToken","newToken","log","tokenExpirySeconds","tokenLifetime","warningBeforeExpiry","refreshBeforeExpiry","setTimeout","then","module","authService","default","refreshToken","window","Notification","permission","body","clearTimeout","updateUserData","userUpdate","currentUser","updatedUser"],"sources":["C:/Users/Masha/Desktop/KP/frontend/src/utils/tokenUtils.js"],"sourcesContent":["/**\r\n * Utility functions for handling authentication tokens\r\n */\r\n\r\n// Глобальный объект для хранения информации о токене\r\nconst tokenInfo = {\r\n  tokenTimer: null,\r\n  tokenRefreshTimer: null,\r\n  tokenExpiryWarningShown: false,\r\n};\r\n\r\n/**\r\n * Get the current user from localStorage\r\n * @returns {Object|null} The user object or null if not found\r\n */\r\nexport const getCurrentUser = () => {\r\n  const userStr = localStorage.getItem('user');\r\n  if (userStr) {\r\n    try {\r\n      return JSON.parse(userStr);\r\n    } catch (error) {\r\n      console.error('Error parsing user from localStorage:', error);\r\n      return null;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n/**\r\n * Get the authentication token from localStorage\r\n * @returns {string|null} The token or null if not found\r\n */\r\nexport const getToken = () => {\r\n  const user = getCurrentUser();\r\n  return user?.accessToken || null;\r\n};\r\n\r\n/**\r\n * Save user data (including token) to localStorage\r\n * @param {Object} userData The user data to save\r\n */\r\nexport const saveUser = (userData) => {\r\n  if (userData) {\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n    \r\n    // Устанавливаем таймер для проверки срока действия токена\r\n    // и предупреждения пользователя перед истечением\r\n    setupTokenExpiryTimer(userData.tokenExpiry);\r\n  }\r\n};\r\n\r\n/**\r\n * Remove user data and token from localStorage\r\n */\r\nexport const removeUser = () => {\r\n  localStorage.removeItem('user');\r\n  clearTokenTimers();\r\n};\r\n\r\n/**\r\n * Update token in axios headers\r\n * @param {Object} api The axios instance\r\n * @param {string} token The token to set\r\n */\r\nexport const setAuthHeader = (api, token) => {\r\n  if (token) {\r\n    api.defaults.headers.common['x-access-token'] = token;\r\n  } else {\r\n    delete api.defaults.headers.common['x-access-token'];\r\n  }\r\n};\r\n\r\n/**\r\n * Обновляет только токен пользователя, сохраняя остальные данные\r\n * @param {string} newToken Новый токен доступа\r\n * @param {number} tokenExpiry Срок действия нового токена в секундах\r\n */\r\nexport const updateToken = (newToken, tokenExpiry) => {\r\n  const user = getCurrentUser();\r\n  if (user && newToken) {\r\n    user.accessToken = newToken;\r\n    \r\n    // Сохраняем информацию о сроке действия токена, если она предоставлена\r\n    if (tokenExpiry) {\r\n      user.tokenExpiry = tokenExpiry;\r\n    }\r\n    \r\n    localStorage.setItem('user', JSON.stringify(user));\r\n    \r\n    // Обновляем таймеры для нового токена\r\n    setupTokenExpiryTimer(tokenExpiry);\r\n    \r\n    console.log('Token updated successfully');\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Настройка таймера для проверки срока истечения токена\r\n * @param {number} tokenExpirySeconds Срок действия токена в секундах\r\n */\r\nexport const setupTokenExpiryTimer = (tokenExpirySeconds) => {\r\n  // Очищаем предыдущий таймер, если он был\r\n  clearTokenTimers();\r\n  \r\n  // Получаем срок действия токена из параметра или используем значение по умолчанию\r\n  const tokenLifetime = (tokenExpirySeconds || 7200) * 1000; // в миллисекундах\r\n  \r\n  console.log(`Setting up token expiry timer for ${tokenLifetime/1000} seconds`);\r\n  \r\n  // Время предупреждения - за 5 минут до истечения\r\n  const warningBeforeExpiry = 5 * 60 * 1000; // 5 минут\r\n  \r\n  // Время для обновления токена - за 10 минут до истечения\r\n  const refreshBeforeExpiry = 10 * 60 * 1000; // 10 минут\r\n  \r\n  // Устанавливаем таймер для автоматического обновления токена\r\n  if (tokenLifetime > refreshBeforeExpiry) {\r\n    tokenInfo.tokenRefreshTimer = setTimeout(() => {\r\n      console.log('Attempting to refresh token before expiry');\r\n      // Импортируем сервис аутентификации динамически чтобы избежать циклических зависимостей\r\n      import('../services/auth.service').then(module => {\r\n        const authService = module.default;\r\n        authService.refreshToken();\r\n      });\r\n    }, tokenLifetime - refreshBeforeExpiry);\r\n  }\r\n  \r\n  // Устанавливаем таймер для предупреждения\r\n  if (tokenLifetime > warningBeforeExpiry) {\r\n    tokenInfo.tokenTimer = setTimeout(() => {\r\n      // Предупреждаем пользователя об истечении срока токена\r\n      if (!tokenInfo.tokenExpiryWarningShown) {\r\n        console.log('Token will expire soon, user should re-login');\r\n        // Показываем системное уведомление, если возможно\r\n        if ('Notification' in window && Notification.permission === 'granted') {\r\n          new Notification('Предупреждение о сессии', {\r\n            body: 'Ваша сессия скоро истечет. Пожалуйста, сохраните данные и войдите заново.',\r\n          });\r\n        }\r\n        \r\n        // Отмечаем, что предупреждение показано\r\n        tokenInfo.tokenExpiryWarningShown = true;\r\n      }\r\n    }, tokenLifetime - warningBeforeExpiry);\r\n  }\r\n};\r\n\r\n/**\r\n * Очистка всех таймеров, связанных с токеном\r\n */\r\nexport const clearTokenTimers = () => {\r\n  if (tokenInfo.tokenTimer) {\r\n    clearTimeout(tokenInfo.tokenTimer);\r\n    tokenInfo.tokenTimer = null;\r\n  }\r\n  \r\n  if (tokenInfo.tokenRefreshTimer) {\r\n    clearTimeout(tokenInfo.tokenRefreshTimer);\r\n    tokenInfo.tokenRefreshTimer = null;\r\n  }\r\n  \r\n  tokenInfo.tokenExpiryWarningShown = false;\r\n};\r\n\r\n/**\r\n * Обновляет объект пользователя с новыми данными, сохраняя существующий токен\r\n * @param {Object} userUpdate - Новые данные пользователя\r\n */\r\nexport const updateUserData = (userUpdate) => {\r\n  const currentUser = getCurrentUser();\r\n  if (currentUser && userUpdate) {\r\n    // Сохраняем текущий токен\r\n    const updatedUser = {\r\n      ...currentUser,\r\n      ...userUpdate,\r\n    };\r\n    localStorage.setItem('user', JSON.stringify(updatedUser));\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}