{"ast":null,"code":"import axios from 'axios';\nimport AuthService from './auth.service';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\nconst instance = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token to every request\ninstance.interceptors.request.use(config => {\n  const user = AuthService.getCurrentUser();\n  if (user && user.accessToken) {\n    config.headers['x-access-token'] = user.accessToken;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle errors\ninstance.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // If error is 401 and not a retry, handle it\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n\n    // Check if we have a token at all\n    const user = AuthService.getCurrentUser();\n    if (!user || !user.accessToken) {\n      // No token available, logout and redirect to login\n      AuthService.logout();\n      window.location.href = '/login';\n      return Promise.reject(error);\n    }\n\n    // Try the request again with the existing token\n    return instance(originalRequest);\n  }\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"names":["axios","AuthService","API_URL","process","env","REACT_APP_API_URL","instance","create","baseURL","headers","interceptors","request","use","config","user","getCurrentUser","accessToken","error","Promise","reject","response","_error$response","originalRequest","status","_retry","logout","window","location","href"],"sources":["C:/Users/Masha/Desktop/KP/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport AuthService from './auth.service';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\r\n\r\nconst instance = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token to every request\r\ninstance.interceptors.request.use(\r\n  (config) => {\r\n    const user = AuthService.getCurrentUser();\r\n    if (user && user.accessToken) {\r\n      config.headers['x-access-token'] = user.accessToken;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle errors\r\ninstance.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    \r\n    // If error is 401 and not a retry, handle it\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      \r\n      // Check if we have a token at all\r\n      const user = AuthService.getCurrentUser();\r\n      if (!user || !user.accessToken) {\r\n        // No token available, logout and redirect to login\r\n        AuthService.logout();\r\n        window.location.href = '/login';\r\n        return Promise.reject(error);\r\n      }\r\n      \r\n      // Try the request again with the existing token\r\n      return instance(originalRequest);\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default instance; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,gBAAgB;AAExC,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,MAAMC,QAAQ,GAAGN,KAAK,CAACO,MAAM,CAAC;EAC5BC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,QAAQ,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAK;EACV,MAAMC,IAAI,GAAGb,WAAW,CAACc,cAAc,CAAC,CAAC;EACzC,IAAID,IAAI,IAAIA,IAAI,CAACE,WAAW,EAAE;IAC5BH,MAAM,CAACJ,OAAO,CAAC,gBAAgB,CAAC,GAAGK,IAAI,CAACE,WAAW;EACrD;EACA,OAAOH,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAX,QAAQ,CAACI,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC/BQ,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACD,MAAOH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACf,MAAMC,eAAe,GAAGL,KAAK,CAACJ,MAAM;;EAEpC;EACA,IAAI,EAAAQ,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC7DF,eAAe,CAACE,MAAM,GAAG,IAAI;;IAE7B;IACA,MAAMV,IAAI,GAAGb,WAAW,CAACc,cAAc,CAAC,CAAC;IACzC,IAAI,CAACD,IAAI,IAAI,CAACA,IAAI,CAACE,WAAW,EAAE;MAC9B;MACAf,WAAW,CAACwB,MAAM,CAAC,CAAC;MACpBC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MAC/B,OAAOV,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;IAC9B;;IAEA;IACA,OAAOX,QAAQ,CAACgB,eAAe,CAAC;EAClC;EAEA,OAAOJ,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeX,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}