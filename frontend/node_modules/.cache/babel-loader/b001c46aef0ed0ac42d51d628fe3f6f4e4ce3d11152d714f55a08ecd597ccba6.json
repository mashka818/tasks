{"ast":null,"code":"import api from './api';\nclass UserService {\n  // Get all users (for admin purposes only)\n  async getAllUsers() {\n    const response = await api.get('/admin/users');\n    return response.data;\n  }\n\n  // Search users by query\n  async searchUsers(query) {\n    const response = await api.get(`/admin/users/search?query=${encodeURIComponent(query)}`);\n    return response.data;\n  }\n\n  // Get user details by ID\n  async getUserById(id) {\n    const response = await api.get(`/admin/users/${id}`);\n    return response.data;\n  }\n\n  // Update user roles\n  async updateUserRoles(userId, roles) {\n    const response = await api.put(`/admin/users/${userId}/roles`, {\n      roles\n    });\n    return response.data;\n  }\n\n  // Update user status (active/inactive)\n  async updateUserStatus(userId, isActive) {\n    const response = await api.put(`/admin/users/${userId}/status`, {\n      isActive\n    });\n    return response.data;\n  }\n\n  // Upload profile image\n  async uploadProfileImage(imageFile) {\n    const formData = new FormData();\n    formData.append('profileImage', imageFile);\n    const response = await api.post('/user/profile/image', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n\n  // Get all workers (for task assignment)\n  async getAllWorkers() {\n    const response = await api.get('/workers');\n    return response.data;\n  }\n\n  // Search workers by name, username, or position\n  async searchWorkers(query) {\n    const response = await api.get(`/workers/search?query=${encodeURIComponent(query)}`);\n    return response.data;\n  }\n\n  // Get all managers\n  async getAllManagers() {\n    const response = await api.get('/admin/managers');\n    return response.data;\n  }\n}\nexport default new UserService();","map":{"version":3,"names":["api","UserService","getAllUsers","response","get","data","searchUsers","query","encodeURIComponent","getUserById","id","updateUserRoles","userId","roles","put","updateUserStatus","isActive","uploadProfileImage","imageFile","formData","FormData","append","post","headers","getAllWorkers","searchWorkers","getAllManagers"],"sources":["C:/Users/Masha/Desktop/KP/frontend/src/services/user.service.js"],"sourcesContent":["import api from './api';\r\n\r\nclass UserService {\r\n  // Get all users (for admin purposes only)\r\n  async getAllUsers() {\r\n    const response = await api.get('/admin/users');\r\n    return response.data;\r\n  }\r\n\r\n  // Search users by query\r\n  async searchUsers(query) {\r\n    const response = await api.get(`/admin/users/search?query=${encodeURIComponent(query)}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Get user details by ID\r\n  async getUserById(id) {\r\n    const response = await api.get(`/admin/users/${id}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Update user roles\r\n  async updateUserRoles(userId, roles) {\r\n    const response = await api.put(`/admin/users/${userId}/roles`, { roles });\r\n    return response.data;\r\n  }\r\n\r\n  // Update user status (active/inactive)\r\n  async updateUserStatus(userId, isActive) {\r\n    const response = await api.put(`/admin/users/${userId}/status`, { isActive });\r\n    return response.data;\r\n  }\r\n\r\n  // Upload profile image\r\n  async uploadProfileImage(imageFile) {\r\n    const formData = new FormData();\r\n    formData.append('profileImage', imageFile);\r\n    \r\n    const response = await api.post('/user/profile/image', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  // Get all workers (for task assignment)\r\n  async getAllWorkers() {\r\n    const response = await api.get('/workers');\r\n    return response.data;\r\n  }\r\n\r\n  // Search workers by name, username, or position\r\n  async searchWorkers(query) {\r\n    const response = await api.get(`/workers/search?query=${encodeURIComponent(query)}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Get all managers\r\n  async getAllManagers() {\r\n    const response = await api.get('/admin/managers');\r\n    return response.data;\r\n  }\r\n}\r\n\r\nexport default new UserService(); "],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,WAAW,CAAC;EAChB;EACA,MAAMC,WAAWA,CAAA,EAAG;IAClB,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,cAAc,CAAC;IAC9C,OAAOD,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMC,WAAWA,CAACC,KAAK,EAAE;IACvB,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,6BAA6BI,kBAAkB,CAACD,KAAK,CAAC,EAAE,CAAC;IACxF,OAAOJ,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMI,WAAWA,CAACC,EAAE,EAAE;IACpB,MAAMP,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,gBAAgBM,EAAE,EAAE,CAAC;IACpD,OAAOP,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMM,eAAeA,CAACC,MAAM,EAAEC,KAAK,EAAE;IACnC,MAAMV,QAAQ,GAAG,MAAMH,GAAG,CAACc,GAAG,CAAC,gBAAgBF,MAAM,QAAQ,EAAE;MAAEC;IAAM,CAAC,CAAC;IACzE,OAAOV,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMU,gBAAgBA,CAACH,MAAM,EAAEI,QAAQ,EAAE;IACvC,MAAMb,QAAQ,GAAG,MAAMH,GAAG,CAACc,GAAG,CAAC,gBAAgBF,MAAM,SAAS,EAAE;MAAEI;IAAS,CAAC,CAAC;IAC7E,OAAOb,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMY,kBAAkBA,CAACC,SAAS,EAAE;IAClC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,cAAc,EAAEH,SAAS,CAAC;IAE1C,MAAMf,QAAQ,GAAG,MAAMH,GAAG,CAACsB,IAAI,CAAC,qBAAqB,EAAEH,QAAQ,EAAE;MAC/DI,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOpB,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMmB,aAAaA,CAAA,EAAG;IACpB,MAAMrB,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,UAAU,CAAC;IAC1C,OAAOD,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMoB,aAAaA,CAAClB,KAAK,EAAE;IACzB,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,yBAAyBI,kBAAkB,CAACD,KAAK,CAAC,EAAE,CAAC;IACpF,OAAOJ,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMqB,cAAcA,CAAA,EAAG;IACrB,MAAMvB,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,iBAAiB,CAAC;IACjD,OAAOD,QAAQ,CAACE,IAAI;EACtB;AACF;AAEA,eAAe,IAAIJ,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}