{"ast":null,"code":"import axios from 'axios';\nimport { getToken, removeUser, getCurrentUser, saveUser } from '../utils/tokenUtils';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\n// Создаем объект для хранения времени последнего использования токена\nconst tokenState = {\n  lastUsed: Date.now(),\n  checkingToken: false\n};\nconst instance = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  // Увеличиваем таймаут для предотвращения ложных ошибок из-за сети\n  timeout: 10000\n});\n\n// Функция для проверки, не истек ли токен бездействия\nconst checkTokenInactivity = () => {\n  const inactivityPeriod = 30 * 60 * 1000; // 30 минут бездействия\n  const now = Date.now();\n  if (now - tokenState.lastUsed > inactivityPeriod) {\n    console.log('Token inactive for too long, cleaning up');\n    removeUser();\n    return false;\n  }\n\n  // Обновляем время последнего использования\n  tokenState.lastUsed = now;\n  return true;\n};\n\n// Request interceptor to add auth token to every request\ninstance.interceptors.request.use(config => {\n  const token = getToken();\n  console.log('API Request to:', config.url);\n\n  // Проверяем токен на бездействие\n  if (token && !checkTokenInactivity()) {\n    // Если токен истек из-за бездействия, перенаправляем на страницу логина\n    console.log('Token inactive, redirecting to login');\n    window.location.href = '/login?expired=true';\n    return Promise.reject(new Error('Token inactive'));\n  }\n  console.log('Token available:', token ? 'Yes' : 'No');\n  if (token) {\n    config.headers['x-access-token'] = token;\n    console.log('Adding token to request headers');\n  } else {\n    console.log('No token available, request will be unauthorized');\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle errors\ninstance.interceptors.response.use(response => {\n  // Обновляем время последнего использования токена\n  tokenState.lastUsed = Date.now();\n  return response;\n}, async error => {\n  var _error$response$data;\n  const originalRequest = error.config;\n\n  // Проверяем, есть ли ответ от сервера\n  if (!error.response) {\n    console.error('Network error or server down:', error.message);\n    return Promise.reject(error);\n  }\n\n  // Если ошибка связана с истечением срока токена и запрос не пытался обновиться ранее\n  if (error.response && (error.response.status === 401 || error.response.status === 403) && !originalRequest._retry && ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) === 'jwt expired') {\n    console.log('Token expired, attempting to refresh');\n    originalRequest._retry = true;\n    try {\n      // Динамический импорт для избежания циклических зависимостей\n      const authServiceModule = await import('./auth.service');\n      const authService = authServiceModule.default;\n\n      // Попытка обновить токен\n      const newToken = await authService.refreshToken();\n      if (newToken) {\n        console.log('Token refreshed, retrying original request');\n        originalRequest.headers['x-access-token'] = newToken;\n        return instance(originalRequest);\n      } else {\n        console.log('Could not refresh token, redirecting to login');\n        // Очищаем данные пользователя\n        removeUser();\n\n        // Перенаправляем на страницу входа\n        if (window.location.pathname !== '/login' && window.location.pathname !== '/') {\n          window.location.href = '/login';\n        }\n      }\n    } catch (refreshError) {\n      console.error('Error refreshing token:', refreshError);\n      // Выполняем выход при ошибке обновления\n      removeUser();\n\n      // Перенаправляем на страницу входа\n      if (window.location.pathname !== '/login' && window.location.pathname !== '/') {\n        window.location.href = '/login';\n      }\n    }\n  }\n\n  // Обрабатываем другие ошибки авторизации\n  if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n    var _error$response$data2;\n    console.log('Authorization error:', error.response.data);\n\n    // Показываем сообщение пользователю о проблеме с авторизацией\n    const errorMessage = ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.message) || 'Ошибка авторизации';\n    console.log(`Auth error: ${errorMessage}`);\n\n    // Если это не страница входа, перенаправляем на неё\n    if (window.location.pathname !== '/login' && window.location.pathname !== '/') {\n      removeUser();\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"names":["axios","getToken","removeUser","getCurrentUser","saveUser","API_URL","process","env","REACT_APP_API_URL","tokenState","lastUsed","Date","now","checkingToken","instance","create","baseURL","headers","timeout","checkTokenInactivity","inactivityPeriod","console","log","interceptors","request","use","config","token","url","window","location","href","Promise","reject","Error","error","response","_error$response$data","originalRequest","message","status","_retry","data","authServiceModule","authService","default","newToken","refreshToken","pathname","refreshError","_error$response$data2","errorMessage"],"sources":["C:/Users/Masha/Desktop/KP/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { getToken, removeUser, getCurrentUser, saveUser } from '../utils/tokenUtils';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\r\n\r\n// Создаем объект для хранения времени последнего использования токена\r\nconst tokenState = {\r\n  lastUsed: Date.now(),\r\n  checkingToken: false\r\n};\r\n\r\nconst instance = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  // Увеличиваем таймаут для предотвращения ложных ошибок из-за сети\r\n  timeout: 10000\r\n});\r\n\r\n// Функция для проверки, не истек ли токен бездействия\r\nconst checkTokenInactivity = () => {\r\n  const inactivityPeriod = 30 * 60 * 1000; // 30 минут бездействия\r\n  const now = Date.now();\r\n  \r\n  if (now - tokenState.lastUsed > inactivityPeriod) {\r\n    console.log('Token inactive for too long, cleaning up');\r\n    removeUser();\r\n    return false;\r\n  }\r\n  \r\n  // Обновляем время последнего использования\r\n  tokenState.lastUsed = now;\r\n  return true;\r\n};\r\n\r\n// Request interceptor to add auth token to every request\r\ninstance.interceptors.request.use(\r\n  (config) => {\r\n    const token = getToken();\r\n    console.log('API Request to:', config.url);\r\n    \r\n    // Проверяем токен на бездействие\r\n    if (token && !checkTokenInactivity()) {\r\n      // Если токен истек из-за бездействия, перенаправляем на страницу логина\r\n      console.log('Token inactive, redirecting to login');\r\n      window.location.href = '/login?expired=true';\r\n      return Promise.reject(new Error('Token inactive'));\r\n    }\r\n    \r\n    console.log('Token available:', token ? 'Yes' : 'No');\r\n    \r\n    if (token) {\r\n      config.headers['x-access-token'] = token;\r\n      console.log('Adding token to request headers');\r\n    } else {\r\n      console.log('No token available, request will be unauthorized');\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle errors\r\ninstance.interceptors.response.use(\r\n  (response) => {\r\n    // Обновляем время последнего использования токена\r\n    tokenState.lastUsed = Date.now();\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    \r\n    // Проверяем, есть ли ответ от сервера\r\n    if (!error.response) {\r\n      console.error('Network error or server down:', error.message);\r\n      return Promise.reject(error);\r\n    }\r\n    \r\n    // Если ошибка связана с истечением срока токена и запрос не пытался обновиться ранее\r\n    if (error.response && \r\n        (error.response.status === 401 || error.response.status === 403) && \r\n        !originalRequest._retry && \r\n        error.response.data?.error === 'jwt expired') {\r\n      \r\n      console.log('Token expired, attempting to refresh');\r\n      originalRequest._retry = true;\r\n      \r\n      try {\r\n        // Динамический импорт для избежания циклических зависимостей\r\n        const authServiceModule = await import('./auth.service');\r\n        const authService = authServiceModule.default;\r\n        \r\n        // Попытка обновить токен\r\n        const newToken = await authService.refreshToken();\r\n        \r\n        if (newToken) {\r\n          console.log('Token refreshed, retrying original request');\r\n          originalRequest.headers['x-access-token'] = newToken;\r\n          return instance(originalRequest);\r\n        } else {\r\n          console.log('Could not refresh token, redirecting to login');\r\n          // Очищаем данные пользователя\r\n          removeUser();\r\n          \r\n          // Перенаправляем на страницу входа\r\n          if (window.location.pathname !== '/login' && window.location.pathname !== '/') {\r\n            window.location.href = '/login';\r\n          }\r\n        }\r\n      } catch (refreshError) {\r\n        console.error('Error refreshing token:', refreshError);\r\n        // Выполняем выход при ошибке обновления\r\n        removeUser();\r\n        \r\n        // Перенаправляем на страницу входа\r\n        if (window.location.pathname !== '/login' && window.location.pathname !== '/') {\r\n          window.location.href = '/login';\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Обрабатываем другие ошибки авторизации\r\n    if (error.response && (error.response.status === 401 || error.response.status === 403)) {\r\n      console.log('Authorization error:', error.response.data);\r\n      \r\n      // Показываем сообщение пользователю о проблеме с авторизацией\r\n      const errorMessage = error.response.data?.message || 'Ошибка авторизации';\r\n      console.log(`Auth error: ${errorMessage}`);\r\n      \r\n      // Если это не страница входа, перенаправляем на неё\r\n      if (window.location.pathname !== '/login' && window.location.pathname !== '/') {\r\n        removeUser();\r\n        window.location.href = '/login';\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default instance; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}