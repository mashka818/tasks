{"ast":null,"code":"import axios from 'axios';\nimport { getToken, removeUser } from '../utils/tokenUtils';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\nconst instance = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token to every request\ninstance.interceptors.request.use(config => {\n  const token = getToken();\n  console.log('API Request to:', config.url);\n  console.log('Token available:', token ? 'Yes' : 'No');\n  if (token) {\n    config.headers['x-access-token'] = token;\n    console.log('Adding token to request headers');\n  } else {\n    console.log('No token available, request will be unauthorized');\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle errors\ninstance.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // If error is 401 and not a retry, handle it\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n\n    // Check if we have a token at all\n    const token = getToken();\n    if (!token) {\n      // No token available, redirect to login\n      removeUser();\n      window.location.href = '/login';\n      return Promise.reject(error);\n    }\n\n    // Try the request again with the existing token\n    return instance(originalRequest);\n  }\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"names":["axios","getToken","removeUser","API_URL","process","env","REACT_APP_API_URL","instance","create","baseURL","headers","interceptors","request","use","config","token","console","log","url","error","Promise","reject","response","_error$response","originalRequest","status","_retry","window","location","href"],"sources":["C:/Users/Masha/Desktop/KP/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { getToken, removeUser } from '../utils/tokenUtils';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\r\n\r\nconst instance = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token to every request\r\ninstance.interceptors.request.use(\r\n  (config) => {\r\n    const token = getToken();\r\n    console.log('API Request to:', config.url);\r\n    console.log('Token available:', token ? 'Yes' : 'No');\r\n    \r\n    if (token) {\r\n      config.headers['x-access-token'] = token;\r\n      console.log('Adding token to request headers');\r\n    } else {\r\n      console.log('No token available, request will be unauthorized');\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle errors\r\ninstance.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    \r\n    // If error is 401 and not a retry, handle it\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      \r\n      // Check if we have a token at all\r\n      const token = getToken();\r\n      if (!token) {\r\n        // No token available, redirect to login\r\n        removeUser();\r\n        window.location.href = '/login';\r\n        return Promise.reject(error);\r\n      }\r\n      \r\n      // Try the request again with the existing token\r\n      return instance(originalRequest);\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default instance; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,UAAU,QAAQ,qBAAqB;AAE1D,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,MAAMC,QAAQ,GAAGP,KAAK,CAACQ,MAAM,CAAC;EAC5BC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,QAAQ,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGd,QAAQ,CAAC,CAAC;EACxBe,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEH,MAAM,CAACI,GAAG,CAAC;EAC1CF,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC;EAErD,IAAIA,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,gBAAgB,CAAC,GAAGK,KAAK;IACxCC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;EAChD,CAAC,MAAM;IACLD,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;EACjE;EACA,OAAOH,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,QAAQ,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC/BS,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACD,MAAOH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACf,MAAMC,eAAe,GAAGL,KAAK,CAACL,MAAM;;EAEpC;EACA,IAAI,EAAAS,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC7DF,eAAe,CAACE,MAAM,GAAG,IAAI;;IAE7B;IACA,MAAMX,KAAK,GAAGd,QAAQ,CAAC,CAAC;IACxB,IAAI,CAACc,KAAK,EAAE;MACV;MACAb,UAAU,CAAC,CAAC;MACZyB,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MAC/B,OAAOT,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;IAC9B;;IAEA;IACA,OAAOZ,QAAQ,CAACiB,eAAe,CAAC;EAClC;EAEA,OAAOJ,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeZ,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}