{"ast":null,"code":"import api from './api';\nclass UserService {\n  // Get all users (for admin purposes only)\n  async getAllUsers() {\n    const response = await api.get('/admin/users');\n    return response.data;\n  }\n\n  // Search users by query\n  async searchUsers(query) {\n    try {\n      // Проверяем, не пустой ли запрос\n      if (!query || !query.trim()) {\n        throw new Error('Поисковый запрос не может быть пустым');\n      }\n\n      // Проверяем минимальную длину запроса\n      if (query.trim().length < 2) {\n        throw new Error('Поисковый запрос должен содержать не менее 2 символов');\n      }\n\n      // Используем безопасное кодирование URI\n      const encodedQuery = encodeURIComponent(query.trim());\n      console.log('Encoded search query:', encodedQuery);\n      const response = await api.get(`/admin/users/search?query=${encodedQuery}`, {\n        timeout: 15000 // Увеличиваем таймаут для поисковых запросов\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error in searchUsers service:', error);\n      throw error;\n    }\n  }\n\n  // Get user details by ID\n  async getUserById(id) {\n    const response = await api.get(`/admin/users/${id}`);\n    return response.data;\n  }\n\n  // Update user roles\n  async updateUserRoles(userId, roles) {\n    const response = await api.put(`/admin/users/${userId}/roles`, {\n      roles\n    });\n    return response.data;\n  }\n\n  // Update user status (active/inactive)\n  async updateUserStatus(userId, isActive) {\n    const response = await api.put(`/admin/users/${userId}/status`, {\n      isActive\n    });\n    return response.data;\n  }\n\n  // Upload profile image\n  async uploadProfileImage(imageFile) {\n    const formData = new FormData();\n    formData.append('profileImage', imageFile);\n    const response = await api.post('/user/profile/image', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n\n  // Get all workers (for task assignment)\n  async getAllWorkers() {\n    const response = await api.get('/workers');\n    return response.data;\n  }\n\n  // Search workers by name, username, or position\n  async searchWorkers(query) {\n    const response = await api.get(`/workers/search?query=${encodeURIComponent(query)}`);\n    return response.data;\n  }\n\n  // Get all managers\n  async getAllManagers() {\n    const response = await api.get('/admin/managers');\n    return response.data;\n  }\n}\nexport default new UserService();","map":{"version":3,"names":["api","UserService","getAllUsers","response","get","data","searchUsers","query","trim","Error","length","encodedQuery","encodeURIComponent","console","log","timeout","error","getUserById","id","updateUserRoles","userId","roles","put","updateUserStatus","isActive","uploadProfileImage","imageFile","formData","FormData","append","post","headers","getAllWorkers","searchWorkers","getAllManagers"],"sources":["C:/Users/Masha/Desktop/KP/frontend/src/services/user.service.js"],"sourcesContent":["import api from './api';\r\n\r\nclass UserService {\r\n  // Get all users (for admin purposes only)\r\n  async getAllUsers() {\r\n    const response = await api.get('/admin/users');\r\n    return response.data;\r\n  }\r\n\r\n  // Search users by query\r\n  async searchUsers(query) {\r\n    try {\r\n      // Проверяем, не пустой ли запрос\r\n      if (!query || !query.trim()) {\r\n        throw new Error('Поисковый запрос не может быть пустым');\r\n      }\r\n      \r\n      // Проверяем минимальную длину запроса\r\n      if (query.trim().length < 2) {\r\n        throw new Error('Поисковый запрос должен содержать не менее 2 символов');\r\n      }\r\n      \r\n      // Используем безопасное кодирование URI\r\n      const encodedQuery = encodeURIComponent(query.trim());\r\n      console.log('Encoded search query:', encodedQuery);\r\n      \r\n      const response = await api.get(`/admin/users/search?query=${encodedQuery}`, {\r\n        timeout: 15000, // Увеличиваем таймаут для поисковых запросов\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error in searchUsers service:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get user details by ID\r\n  async getUserById(id) {\r\n    const response = await api.get(`/admin/users/${id}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Update user roles\r\n  async updateUserRoles(userId, roles) {\r\n    const response = await api.put(`/admin/users/${userId}/roles`, { roles });\r\n    return response.data;\r\n  }\r\n\r\n  // Update user status (active/inactive)\r\n  async updateUserStatus(userId, isActive) {\r\n    const response = await api.put(`/admin/users/${userId}/status`, { isActive });\r\n    return response.data;\r\n  }\r\n\r\n  // Upload profile image\r\n  async uploadProfileImage(imageFile) {\r\n    const formData = new FormData();\r\n    formData.append('profileImage', imageFile);\r\n    \r\n    const response = await api.post('/user/profile/image', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  // Get all workers (for task assignment)\r\n  async getAllWorkers() {\r\n    const response = await api.get('/workers');\r\n    return response.data;\r\n  }\r\n\r\n  // Search workers by name, username, or position\r\n  async searchWorkers(query) {\r\n    const response = await api.get(`/workers/search?query=${encodeURIComponent(query)}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Get all managers\r\n  async getAllManagers() {\r\n    const response = await api.get('/admin/managers');\r\n    return response.data;\r\n  }\r\n}\r\n\r\nexport default new UserService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}