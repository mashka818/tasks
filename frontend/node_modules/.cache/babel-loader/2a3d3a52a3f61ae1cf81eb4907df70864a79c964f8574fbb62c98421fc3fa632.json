{"ast":null,"code":"import axios from 'axios';\nimport { getToken, removeUser, getCurrentUser, saveUser } from '../utils/tokenUtils';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\n// Создаем объект для хранения времени последнего использования токена\nconst tokenState = {\n  lastUsed: Date.now(),\n  checkingToken: false\n};\nconst instance = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  // Увеличиваем таймаут для предотвращения ложных ошибок из-за сети\n  timeout: 10000\n});\n\n// Функция для проверки, не истек ли токен бездействия\nconst checkTokenInactivity = () => {\n  const inactivityPeriod = 30 * 60 * 1000; // 30 минут бездействия\n  const now = Date.now();\n  if (now - tokenState.lastUsed > inactivityPeriod) {\n    console.log('Token inactive for too long, cleaning up');\n    removeUser();\n    return false;\n  }\n\n  // Обновляем время последнего использования\n  tokenState.lastUsed = now;\n  return true;\n};\n\n// Request interceptor to add auth token to every request\ninstance.interceptors.request.use(config => {\n  const token = getToken();\n  console.log('API Request to:', config.url);\n\n  // Проверяем токен на бездействие\n  if (token && !checkTokenInactivity()) {\n    // Если токен истек из-за бездействия, перенаправляем на страницу логина\n    console.log('Token inactive, redirecting to login');\n    window.location.href = '/login?expired=true';\n    return Promise.reject(new Error('Token inactive'));\n  }\n  console.log('Token available:', token ? 'Yes' : 'No');\n  if (token) {\n    config.headers['x-access-token'] = token;\n    console.log('Adding token to request headers');\n  } else {\n    console.log('No token available, request will be unauthorized');\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle errors\ninstance.interceptors.response.use(response => {\n  // Обновляем время последнего использования токена\n  tokenState.lastUsed = Date.now();\n  return response;\n}, async error => {\n  var _error$response, _error$response2;\n  const originalRequest = error.config;\n\n  // Проверяем, есть ли ответ от сервера\n  if (!error.response) {\n    console.error('Network error or server down:', error.message);\n    return Promise.reject(error);\n  }\n\n  // If error is 401 (Unauthorized) or 403 (Forbidden), handle it\n  if ((((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 || ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 403) && !originalRequest._retry) {\n    var _error$response3, _error$response4, _error$response4$data;\n    console.log('Authentication error:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status, (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message);\n\n    // Mark request as retried to prevent infinite loops\n    originalRequest._retry = true;\n\n    // Check if we have a token at all\n    const token = getToken();\n    if (!token) {\n      console.log('No token available, redirecting to login page');\n      removeUser();\n      window.location.href = '/login';\n      return Promise.reject(error);\n    }\n    try {\n      var _error$response5, _error$response5$data, _error$response6, _error$response6$data, _error$response7, _error$response7$data, _error$response8, _error$response8$data;\n      // Check if the error message indicates token expiration\n      const isExpiredToken = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) === 'Неавторизован!' || ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) === 'jwt expired' || ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) === 'Срок действия токена истек!' || ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.error) === 'jwt expired';\n      if (isExpiredToken) {\n        console.log('Token expired, redirecting to login page');\n        removeUser(); // Clear expired token\n        window.location.href = '/login?expired=true';\n        return Promise.reject(error);\n      }\n\n      // Для других ошибок попробуем запрос еще раз\n      console.log('Retrying request once with existing token');\n      return instance(originalRequest);\n    } catch (refreshError) {\n      console.error('Error handling auth:', refreshError);\n      removeUser();\n      window.location.href = '/login';\n      return Promise.reject(error);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"names":["axios","getToken","removeUser","getCurrentUser","saveUser","API_URL","process","env","REACT_APP_API_URL","tokenState","lastUsed","Date","now","checkingToken","instance","create","baseURL","headers","timeout","checkTokenInactivity","inactivityPeriod","console","log","interceptors","request","use","config","token","url","window","location","href","Promise","reject","Error","error","response","_error$response","_error$response2","originalRequest","message","status","_retry","_error$response3","_error$response4","_error$response4$data","data","_error$response5","_error$response5$data","_error$response6","_error$response6$data","_error$response7","_error$response7$data","_error$response8","_error$response8$data","isExpiredToken","refreshError"],"sources":["C:/Users/Masha/Desktop/KP/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { getToken, removeUser, getCurrentUser, saveUser } from '../utils/tokenUtils';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\r\n\r\n// Создаем объект для хранения времени последнего использования токена\r\nconst tokenState = {\r\n  lastUsed: Date.now(),\r\n  checkingToken: false\r\n};\r\n\r\nconst instance = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  // Увеличиваем таймаут для предотвращения ложных ошибок из-за сети\r\n  timeout: 10000\r\n});\r\n\r\n// Функция для проверки, не истек ли токен бездействия\r\nconst checkTokenInactivity = () => {\r\n  const inactivityPeriod = 30 * 60 * 1000; // 30 минут бездействия\r\n  const now = Date.now();\r\n  \r\n  if (now - tokenState.lastUsed > inactivityPeriod) {\r\n    console.log('Token inactive for too long, cleaning up');\r\n    removeUser();\r\n    return false;\r\n  }\r\n  \r\n  // Обновляем время последнего использования\r\n  tokenState.lastUsed = now;\r\n  return true;\r\n};\r\n\r\n// Request interceptor to add auth token to every request\r\ninstance.interceptors.request.use(\r\n  (config) => {\r\n    const token = getToken();\r\n    console.log('API Request to:', config.url);\r\n    \r\n    // Проверяем токен на бездействие\r\n    if (token && !checkTokenInactivity()) {\r\n      // Если токен истек из-за бездействия, перенаправляем на страницу логина\r\n      console.log('Token inactive, redirecting to login');\r\n      window.location.href = '/login?expired=true';\r\n      return Promise.reject(new Error('Token inactive'));\r\n    }\r\n    \r\n    console.log('Token available:', token ? 'Yes' : 'No');\r\n    \r\n    if (token) {\r\n      config.headers['x-access-token'] = token;\r\n      console.log('Adding token to request headers');\r\n    } else {\r\n      console.log('No token available, request will be unauthorized');\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle errors\r\ninstance.interceptors.response.use(\r\n  (response) => {\r\n    // Обновляем время последнего использования токена\r\n    tokenState.lastUsed = Date.now();\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    \r\n    // Проверяем, есть ли ответ от сервера\r\n    if (!error.response) {\r\n      console.error('Network error or server down:', error.message);\r\n      return Promise.reject(error);\r\n    }\r\n    \r\n    // If error is 401 (Unauthorized) or 403 (Forbidden), handle it\r\n    if ((error.response?.status === 401 || error.response?.status === 403) && !originalRequest._retry) {\r\n      console.log('Authentication error:', error.response?.status, error.response?.data?.message);\r\n      \r\n      // Mark request as retried to prevent infinite loops\r\n      originalRequest._retry = true;\r\n      \r\n      // Check if we have a token at all\r\n      const token = getToken();\r\n      if (!token) {\r\n        console.log('No token available, redirecting to login page');\r\n        removeUser();\r\n        window.location.href = '/login';\r\n        return Promise.reject(error);\r\n      }\r\n      \r\n      try {\r\n        // Check if the error message indicates token expiration\r\n        const isExpiredToken = \r\n          error.response?.data?.message === 'Неавторизован!' || \r\n          error.response?.data?.message === 'jwt expired' ||\r\n          error.response?.data?.message === 'Срок действия токена истек!' ||\r\n          error.response?.data?.error === 'jwt expired';\r\n        \r\n        if (isExpiredToken) {\r\n          console.log('Token expired, redirecting to login page');\r\n          removeUser(); // Clear expired token\r\n          window.location.href = '/login?expired=true';\r\n          return Promise.reject(error);\r\n        }\r\n        \r\n        // Для других ошибок попробуем запрос еще раз\r\n        console.log('Retrying request once with existing token');\r\n        return instance(originalRequest);\r\n      } catch (refreshError) {\r\n        console.error('Error handling auth:', refreshError);\r\n        removeUser();\r\n        window.location.href = '/login';\r\n        return Promise.reject(error);\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default instance; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}