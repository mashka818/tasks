{"ast":null,"code":"import api from './api';\nclass UserService {\n  // Get all users (for admin purposes only)\n  async getAllUsers() {\n    const response = await api.get('/admin/users');\n    return response.data;\n  }\n\n  // Search users by query\n  async searchUsers(query, retryCount = 0) {\n    try {\n      // Проверяем, не пустой ли запрос\n      if (!query || !query.trim()) {\n        throw new Error('Поисковый запрос не может быть пустым');\n      }\n\n      // Проверяем минимальную длину запроса\n      if (query.trim().length < 2) {\n        throw new Error('Поисковый запрос должен содержать не менее 2 символов');\n      }\n\n      // Используем безопасное кодирование URI\n      const encodedQuery = encodeURIComponent(query.trim());\n      console.log('Encoded search query:', encodedQuery);\n      const response = await api.get(`/admin/users/search?query=${encodedQuery}`, {\n        timeout: 15000 // Увеличиваем таймаут для поисковых запросов\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error in searchUsers service:', error);\n\n      // Если это ошибка сервера (500) и у нас есть еще попытки, пробуем снова\n      if (error.response && error.response.status === 500 && retryCount < 2) {\n        console.log(`Retry attempt ${retryCount + 1} for search query`);\n\n        // Небольшая задержка перед повторной попыткой\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        // Рекурсивно вызываем себя с увеличенным счетчиком повторов\n        return this.searchUsers(query, retryCount + 1);\n      }\n      throw error;\n    }\n  }\n\n  // Get user details by ID\n  async getUserById(id) {\n    const response = await api.get(`/admin/users/${id}`);\n    return response.data;\n  }\n\n  // Update user roles\n  async updateUserRoles(userId, roles) {\n    const response = await api.put(`/admin/users/${userId}/roles`, {\n      roles\n    });\n    return response.data;\n  }\n\n  // Update user status (active/inactive)\n  async updateUserStatus(userId, isActive) {\n    const response = await api.put(`/admin/users/${userId}/status`, {\n      isActive\n    });\n    return response.data;\n  }\n\n  // Upload profile image\n  async uploadProfileImage(imageFile) {\n    const formData = new FormData();\n    formData.append('profileImage', imageFile);\n    const response = await api.post('/user/profile/image', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n\n  // Get all workers (for task assignment)\n  async getAllWorkers() {\n    const response = await api.get('/workers');\n    return response.data;\n  }\n\n  // Search workers by name, username, or position\n  async searchWorkers(query) {\n    const response = await api.get(`/workers/search?query=${encodeURIComponent(query)}`);\n    return response.data;\n  }\n\n  // Get all managers\n  async getAllManagers() {\n    const response = await api.get('/admin/managers');\n    return response.data;\n  }\n}\nexport default new UserService();","map":{"version":3,"names":["api","UserService","getAllUsers","response","get","data","searchUsers","query","retryCount","trim","Error","length","encodedQuery","encodeURIComponent","console","log","timeout","error","status","Promise","resolve","setTimeout","getUserById","id","updateUserRoles","userId","roles","put","updateUserStatus","isActive","uploadProfileImage","imageFile","formData","FormData","append","post","headers","getAllWorkers","searchWorkers","getAllManagers"],"sources":["C:/Users/Masha/Desktop/KP/frontend/src/services/user.service.js"],"sourcesContent":["import api from './api';\r\n\r\nclass UserService {\r\n  // Get all users (for admin purposes only)\r\n  async getAllUsers() {\r\n    const response = await api.get('/admin/users');\r\n    return response.data;\r\n  }\r\n\r\n  // Search users by query\r\n  async searchUsers(query, retryCount = 0) {\r\n    try {\r\n      // Проверяем, не пустой ли запрос\r\n      if (!query || !query.trim()) {\r\n        throw new Error('Поисковый запрос не может быть пустым');\r\n      }\r\n      \r\n      // Проверяем минимальную длину запроса\r\n      if (query.trim().length < 2) {\r\n        throw new Error('Поисковый запрос должен содержать не менее 2 символов');\r\n      }\r\n      \r\n      // Используем безопасное кодирование URI\r\n      const encodedQuery = encodeURIComponent(query.trim());\r\n      console.log('Encoded search query:', encodedQuery);\r\n      \r\n      const response = await api.get(`/admin/users/search?query=${encodedQuery}`, {\r\n        timeout: 15000, // Увеличиваем таймаут для поисковых запросов\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error in searchUsers service:', error);\r\n      \r\n      // Если это ошибка сервера (500) и у нас есть еще попытки, пробуем снова\r\n      if (error.response && error.response.status === 500 && retryCount < 2) {\r\n        console.log(`Retry attempt ${retryCount + 1} for search query`);\r\n        \r\n        // Небольшая задержка перед повторной попыткой\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        \r\n        // Рекурсивно вызываем себя с увеличенным счетчиком повторов\r\n        return this.searchUsers(query, retryCount + 1);\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get user details by ID\r\n  async getUserById(id) {\r\n    const response = await api.get(`/admin/users/${id}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Update user roles\r\n  async updateUserRoles(userId, roles) {\r\n    const response = await api.put(`/admin/users/${userId}/roles`, { roles });\r\n    return response.data;\r\n  }\r\n\r\n  // Update user status (active/inactive)\r\n  async updateUserStatus(userId, isActive) {\r\n    const response = await api.put(`/admin/users/${userId}/status`, { isActive });\r\n    return response.data;\r\n  }\r\n\r\n  // Upload profile image\r\n  async uploadProfileImage(imageFile) {\r\n    const formData = new FormData();\r\n    formData.append('profileImage', imageFile);\r\n    \r\n    const response = await api.post('/user/profile/image', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  // Get all workers (for task assignment)\r\n  async getAllWorkers() {\r\n    const response = await api.get('/workers');\r\n    return response.data;\r\n  }\r\n\r\n  // Search workers by name, username, or position\r\n  async searchWorkers(query) {\r\n    const response = await api.get(`/workers/search?query=${encodeURIComponent(query)}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Get all managers\r\n  async getAllManagers() {\r\n    const response = await api.get('/admin/managers');\r\n    return response.data;\r\n  }\r\n}\r\n\r\nexport default new UserService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}